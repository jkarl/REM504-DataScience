# R Spatial data exercise
## Goal of this exercise is to load some spatial data in R, 
##    do some simple analyses, and create a map using ggplot.
##    Make sure to refer to the class lecture materials for how to do the steps below.

#### Datasets (in the class repo Practice_Datasets folder:
####  private_pasture.shp - private pasture boundary
####  holding_pasture_merged_cleaned.shp - merged set of cattle GPS points

## Load libraries
library(rgdal)
library(sp)
library(raster)
library(spatialEco)
library(ggplot2)
library(dplyr)
library(xml2)
library(httr)

data.path <- "C:/Users/Emily Washburne/Documents/REM504-DataScience/Practice_Datasets"

getwd()
setwd("C:/Users/Emily Washburne/Documents/REM504-DataScience/Practice_Datasets")
?readOGR
?sample

## 1. Load the two shapefiles and name the objects gps.data and pasture
gps.data <- readOGR( dsn = data.path, layer = "holding_pasture_merged_cleaned")
pasture <- readOGR( dsn = data.path, layer = "private_pasture")

## Take a random subset of 10 GPS points
rand.IDs <- sample(1:length(gps.data), size = 10, replace = FALSE) #seperate ID numbers for 10 random points
gps.rand <- gps.data[rand.IDs,]

## 2. Refer to the data API lecture materials and use the USGS elevation API service to get the elevation value for each point
###   MAKE SURE YOU PROGRAM IN THE TIME DELAY using Sys.sleep(1)

cow.elevations <- data.frame()

### My for loop is where I am getting stuck. I needed to load a few more packages to enable the GET function and I was originally  
### struggling with how to properly create my "lat" and "long" within the loop. How do we know which coords.x1/x2 is latitude vs. 
### longitude? I am currently getting 3 columns and 10 rows for cow.elevations but the "elev" column looks wrong to me. They all say
### -1e + 06. Maybe I'm not interpreting it correctly. Also, when I execute this loop I get the error "No encoding 
### supplied: defaulting to UTF-8". From looking at the API & spatial data lecture, I'm not seeing where I would include this encoding. 

for (i in 1:nrow(gps.rand@coords)) {
  row <- as.data.frame(gps.rand@coords)[i,]
  lat <- row$coords.x2
  long <- row$coords.x1 
  query.string <- paste("http://ned.usgs.gov/epqs/pqs.php?x=",long,"&y=",lat,"&units=Meters&output=xml",sep="")
  elev.response <- GET(query.string)
  if (elev.response$status_code == 200){
    elev.xml <- content(elev.response, "text") %>% read_xml
    elev <- xml_find_all(elev.xml, "//Elevation") %>% xml_text() %>% as.numeric()
    cow.elevations <- rbind(cow.elevations, data.frame("Latitude"= row$coords.x2,
                                                       "Longitude"= row$coords.x1,
                                                       "NED.elev"= elev))
  }
  Sys.sleep(1)
}

## 3. Check the projections for each dataset and reproject to UTM Zone 12 as needed
u12.proj <- "+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0" # from spatialreference.org

projection(pasture)
projection(gps.data)

proj4string(pasture) <- u12.proj

